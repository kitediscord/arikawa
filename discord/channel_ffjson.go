// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: discord/channel.go

package discord

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *Channel) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Channel) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "id":`)

	{

		obj, err = j.ID.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteByte(',')
	if j.GuildID != 0 {
		buf.WriteString(`"guild_id":`)

		{

			obj, err = j.GuildID.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if j.Type != 0 {
		buf.WriteString(`"type":`)
		fflib.FormatBits2(buf, uint64(j.Type), 10, false)
		buf.WriteByte(',')
	}
	if j.NSFW != false {
		if j.NSFW {
			buf.WriteString(`"nsfw":true`)
		} else {
			buf.WriteString(`"nsfw":false`)
		}
		buf.WriteByte(',')
	}
	if j.Position != 0 {
		buf.WriteString(`"position":`)
		fflib.FormatBits2(buf, uint64(j.Position), 10, j.Position < 0)
		buf.WriteByte(',')
	}
	if len(j.Overwrites) != 0 {
		buf.WriteString(`"permission_overwrites":`)
		if j.Overwrites != nil {
			buf.WriteString(`[`)
			for i, v := range j.Overwrites {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					err = v.MarshalJSONBuf(buf)
					if err != nil {
						return err
					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.Name) != 0 {
		buf.WriteString(`"name":`)
		fflib.WriteJsonString(buf, string(j.Name))
		buf.WriteByte(',')
	}
	if len(j.Topic) != 0 {
		buf.WriteString(`"topic":`)
		fflib.WriteJsonString(buf, string(j.Topic))
		buf.WriteByte(',')
	}
	if j.LastMessageID != 0 {
		buf.WriteString(`"last_message_id":`)

		{

			obj, err = j.LastMessageID.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if j.VoiceBitrate != 0 {
		buf.WriteString(`"bitrate":`)
		fflib.FormatBits2(buf, uint64(j.VoiceBitrate), 10, false)
		buf.WriteByte(',')
	}
	if j.VoiceUserLimit != 0 {
		buf.WriteString(`"user_limit":`)
		fflib.FormatBits2(buf, uint64(j.VoiceUserLimit), 10, false)
		buf.WriteByte(',')
	}
	if j.Flags != 0 {
		buf.WriteString(`"flags":`)
		fflib.FormatBits2(buf, uint64(j.Flags), 10, false)
		buf.WriteByte(',')
	}
	if j.UserRateLimit != 0 {
		buf.WriteString(`"rate_limit_per_user":`)

		{

			obj, err = j.UserRateLimit.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if len(j.DMRecipients) != 0 {
		buf.WriteString(`"recipients":`)
		if j.DMRecipients != nil {
			buf.WriteString(`[`)
			for i, v := range j.DMRecipients {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					err = v.MarshalJSONBuf(buf)
					if err != nil {
						return err
					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.Icon) != 0 {
		buf.WriteString(`"icon":`)
		fflib.WriteJsonString(buf, string(j.Icon))
		buf.WriteByte(',')
	}
	if j.OwnerID != 0 {
		buf.WriteString(`"owner_id":`)

		{

			obj, err = j.OwnerID.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if j.AppID != 0 {
		buf.WriteString(`"application_id":`)

		{

			obj, err = j.AppID.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if j.ParentID != 0 {
		buf.WriteString(`"parent_id":`)

		{

			obj, err = j.ParentID.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if true {
		buf.WriteString(`"last_pin_timestamp":`)

		{

			obj, err = j.LastPinTime.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if len(j.RTCRegionID) != 0 {
		buf.WriteString(`"rtc_region":`)
		fflib.WriteJsonString(buf, string(j.RTCRegionID))
		buf.WriteByte(',')
	}
	if j.VideoQualityMode != 0 {
		buf.WriteString(`"video_quality_mode":`)
		fflib.FormatBits2(buf, uint64(j.VideoQualityMode), 10, false)
		buf.WriteByte(',')
	}
	if j.MessageCount != 0 {
		buf.WriteString(`"message_count":`)
		fflib.FormatBits2(buf, uint64(j.MessageCount), 10, j.MessageCount < 0)
		buf.WriteByte(',')
	}
	if j.MemberCount != 0 {
		buf.WriteString(`"member_count":`)
		fflib.FormatBits2(buf, uint64(j.MemberCount), 10, j.MemberCount < 0)
		buf.WriteByte(',')
	}
	if j.ThreadMetadata != nil {
		if true {
			buf.WriteString(`"thread_metadata":`)

			{

				err = j.ThreadMetadata.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if j.ThreadMember != nil {
		if true {
			buf.WriteString(`"thread_member":`)

			{

				err = j.ThreadMember.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if j.DefaultAutoArchiveDuration != 0 {
		buf.WriteString(`"default_auto_archive_duration":`)
		fflib.FormatBits2(buf, uint64(j.DefaultAutoArchiveDuration), 10, j.DefaultAutoArchiveDuration < 0)
		buf.WriteByte(',')
	}
	if j.SelfPermissions != 0 {
		buf.WriteString(`"permissions":"`)
		fflib.FormatBits2(buf, uint64(j.SelfPermissions), 10, false)
		buf.WriteString(`",`)
	}
	if len(j.AvailableTags) != 0 {
		buf.WriteString(`"available_tags":`)
		if j.AvailableTags != nil {
			buf.WriteString(`[`)
			for i, v := range j.AvailableTags {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					err = v.MarshalJSONBuf(buf)
					if err != nil {
						return err
					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.AppliedTags) != 0 {
		buf.WriteString(`"applied_tags":`)
		if j.AppliedTags != nil {
			buf.WriteString(`[`)
			for i, v := range j.AppliedTags {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					obj, err = v.MarshalJSON()
					if err != nil {
						return err
					}
					buf.Write(obj)

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.DefaultReactionEmoji != nil {
		if true {
			buf.WriteString(`"default_reaction_emoji":`)

			{

				err = j.DefaultReactionEmoji.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if j.DefaultThreadRateLimitPerUser != 0 {
		buf.WriteString(`"default_thread_rate_limit_per_user":`)
		fflib.FormatBits2(buf, uint64(j.DefaultThreadRateLimitPerUser), 10, j.DefaultThreadRateLimitPerUser < 0)
		buf.WriteByte(',')
	}
	if j.DefaultSoftOrder != nil {
		if true {
			buf.WriteString(`"default_sort_order":`)
			fflib.FormatBits2(buf, uint64(*j.DefaultSoftOrder), 10, false)
			buf.WriteByte(',')
		}
	}
	if j.DefaultForumLayout != 0 {
		buf.WriteString(`"default_forum_layout":`)
		fflib.FormatBits2(buf, uint64(j.DefaultForumLayout), 10, false)
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *ForumReaction) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ForumReaction) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"emoji_id":`)

	{

		obj, err = j.EmojiID.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	if j.EmojiName != nil {
		buf.WriteString(`,"emoji_name":`)
		if j.EmojiName != nil {
			fflib.WriteJsonString(buf, string(*j.EmojiName))
		} else {
			buf.WriteString(`null`)
		}
	} else {
		buf.WriteString(`,"emoji_name":null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtForumReactionbase = iota
	ffjtForumReactionnosuchkey

	ffjtForumReactionEmojiID

	ffjtForumReactionEmojiName
)

var ffjKeyForumReactionEmojiID = []byte("emoji_id")

var ffjKeyForumReactionEmojiName = []byte("emoji_name")

// UnmarshalJSON umarshall json - template of ffjson
func (j *ForumReaction) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *ForumReaction) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtForumReactionbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtForumReactionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'e':

					if bytes.Equal(ffjKeyForumReactionEmojiID, kn) {
						currentKey = ffjtForumReactionEmojiID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyForumReactionEmojiName, kn) {
						currentKey = ffjtForumReactionEmojiName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeyForumReactionEmojiName, kn) {
					currentKey = ffjtForumReactionEmojiName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyForumReactionEmojiID, kn) {
					currentKey = ffjtForumReactionEmojiID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtForumReactionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtForumReactionEmojiID:
					goto handle_EmojiID

				case ffjtForumReactionEmojiName:
					goto handle_EmojiName

				case ffjtForumReactionnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_EmojiID:

	/* handler: j.EmojiID type=discord.EmojiID kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.EmojiID.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EmojiName:

	/* handler: j.EmojiName type=option.String kind=ptr quoted=false*/

	{

		if tok == fflib.FFTok_null {
			j.EmojiName = nil
		} else {
			if j.EmojiName == nil {
				j.EmojiName = new(string)
			}

			/* handler: j.EmojiName type=string kind=string quoted=false*/

			{

				{
					if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
					}
				}

				if tok == fflib.FFTok_null {

					j.EmojiName = nil

				} else {

					var tval string
					outBuf := fs.Output.Bytes()

					tval = string(string(outBuf))
					j.EmojiName = &tval

				}
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Overwrite) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Overwrite) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"id":`)

	{

		obj, err = j.ID.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"type":`)
	fflib.FormatBits2(buf, uint64(j.Type), 10, false)
	buf.WriteString(`,"allow":"`)
	fflib.FormatBits2(buf, uint64(j.Allow), 10, false)
	buf.WriteString(`","deny":"`)
	fflib.FormatBits2(buf, uint64(j.Deny), 10, false)
	buf.WriteString(`"}`)
	return nil
}

const (
	ffjtOverwritebase = iota
	ffjtOverwritenosuchkey

	ffjtOverwriteID

	ffjtOverwriteType

	ffjtOverwriteAllow

	ffjtOverwriteDeny
)

var ffjKeyOverwriteID = []byte("id")

var ffjKeyOverwriteType = []byte("type")

var ffjKeyOverwriteAllow = []byte("allow")

var ffjKeyOverwriteDeny = []byte("deny")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Overwrite) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Overwrite) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtOverwritebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtOverwritenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyOverwriteAllow, kn) {
						currentKey = ffjtOverwriteAllow
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffjKeyOverwriteDeny, kn) {
						currentKey = ffjtOverwriteDeny
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyOverwriteID, kn) {
						currentKey = ffjtOverwriteID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyOverwriteType, kn) {
						currentKey = ffjtOverwriteType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyOverwriteDeny, kn) {
					currentKey = ffjtOverwriteDeny
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyOverwriteAllow, kn) {
					currentKey = ffjtOverwriteAllow
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyOverwriteType, kn) {
					currentKey = ffjtOverwriteType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyOverwriteID, kn) {
					currentKey = ffjtOverwriteID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtOverwritenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtOverwriteID:
					goto handle_ID

				case ffjtOverwriteType:
					goto handle_Type

				case ffjtOverwriteAllow:
					goto handle_Allow

				case ffjtOverwriteDeny:
					goto handle_Deny

				case ffjtOverwritenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: j.ID type=discord.Snowflake kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.ID.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: j.Type type=discord.OverwriteType kind=uint8 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.Type.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Allow:

	/* handler: j.Allow type=discord.Permissions kind=uint64 quoted=true*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null && tok != fflib.FFTok_string {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Permissions", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Allow = Permissions(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Deny:

	/* handler: j.Deny type=discord.Permissions kind=uint64 quoted=true*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null && tok != fflib.FFTok_string {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Permissions", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Deny = Permissions(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Tag) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Tag) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if j.ID != 0 {
		buf.WriteString(`"id":`)

		{

			obj, err = j.ID.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	buf.WriteString(`"name":`)
	fflib.WriteJsonString(buf, string(j.Name))
	if j.Moderated {
		buf.WriteString(`,"moderated":true`)
	} else {
		buf.WriteString(`,"moderated":false`)
	}
	buf.WriteString(`,"emoji_id":`)

	{

		obj, err = j.EmojiID.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	if j.EmojiName != nil {
		buf.WriteString(`,"emoji_name":`)
		if j.EmojiName != nil {
			fflib.WriteJsonString(buf, string(*j.EmojiName))
		} else {
			buf.WriteString(`null`)
		}
	} else {
		buf.WriteString(`,"emoji_name":null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtTagbase = iota
	ffjtTagnosuchkey

	ffjtTagID

	ffjtTagName

	ffjtTagModerated

	ffjtTagEmojiID

	ffjtTagEmojiName
)

var ffjKeyTagID = []byte("id")

var ffjKeyTagName = []byte("name")

var ffjKeyTagModerated = []byte("moderated")

var ffjKeyTagEmojiID = []byte("emoji_id")

var ffjKeyTagEmojiName = []byte("emoji_name")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Tag) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Tag) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtTagbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtTagnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'e':

					if bytes.Equal(ffjKeyTagEmojiID, kn) {
						currentKey = ffjtTagEmojiID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyTagEmojiName, kn) {
						currentKey = ffjtTagEmojiName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyTagID, kn) {
						currentKey = ffjtTagID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyTagModerated, kn) {
						currentKey = ffjtTagModerated
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffjKeyTagName, kn) {
						currentKey = ffjtTagName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeyTagEmojiName, kn) {
					currentKey = ffjtTagEmojiName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyTagEmojiID, kn) {
					currentKey = ffjtTagEmojiID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTagModerated, kn) {
					currentKey = ffjtTagModerated
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTagName, kn) {
					currentKey = ffjtTagName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTagID, kn) {
					currentKey = ffjtTagID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtTagnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtTagID:
					goto handle_ID

				case ffjtTagName:
					goto handle_Name

				case ffjtTagModerated:
					goto handle_Moderated

				case ffjtTagEmojiID:
					goto handle_EmojiID

				case ffjtTagEmojiName:
					goto handle_EmojiName

				case ffjtTagnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: j.ID type=discord.TagID kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.ID.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Name:

	/* handler: j.Name type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Name = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Moderated:

	/* handler: j.Moderated type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.Moderated = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.Moderated = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EmojiID:

	/* handler: j.EmojiID type=discord.EmojiID kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.EmojiID.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EmojiName:

	/* handler: j.EmojiName type=option.String kind=ptr quoted=false*/

	{

		if tok == fflib.FFTok_null {
			j.EmojiName = nil
		} else {
			if j.EmojiName == nil {
				j.EmojiName = new(string)
			}

			/* handler: j.EmojiName type=string kind=string quoted=false*/

			{

				{
					if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
					}
				}

				if tok == fflib.FFTok_null {

					j.EmojiName = nil

				} else {

					var tval string
					outBuf := fs.Output.Bytes()

					tval = string(string(outBuf))
					j.EmojiName = &tval

				}
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *ThreadMember) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ThreadMember) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if j.ID != 0 {
		buf.WriteString(`"id":`)

		{

			obj, err = j.ID.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if j.UserID != 0 {
		buf.WriteString(`"user_id":`)

		{

			obj, err = j.UserID.MarshalJSON()
			if err != nil {
				return err
			}
			buf.Write(obj)

		}
		buf.WriteByte(',')
	}
	if j.Member != nil {
		if true {
			buf.WriteString(`"member":`)

			{

				err = j.Member.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if j.Presence != nil {
		if true {
			buf.WriteString(`"presence":`)

			{

				err = j.Presence.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"join_timestamp":`)

	{

		obj, err = j.JoinTimestamp.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"flags":`)
	fflib.FormatBits2(buf, uint64(j.Flags), 10, false)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtThreadMemberbase = iota
	ffjtThreadMembernosuchkey

	ffjtThreadMemberID

	ffjtThreadMemberUserID

	ffjtThreadMemberMember

	ffjtThreadMemberPresence

	ffjtThreadMemberJoinTimestamp

	ffjtThreadMemberFlags
)

var ffjKeyThreadMemberID = []byte("id")

var ffjKeyThreadMemberUserID = []byte("user_id")

var ffjKeyThreadMemberMember = []byte("member")

var ffjKeyThreadMemberPresence = []byte("presence")

var ffjKeyThreadMemberJoinTimestamp = []byte("join_timestamp")

var ffjKeyThreadMemberFlags = []byte("flags")

// UnmarshalJSON umarshall json - template of ffjson
func (j *ThreadMember) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *ThreadMember) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtThreadMemberbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtThreadMembernosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'f':

					if bytes.Equal(ffjKeyThreadMemberFlags, kn) {
						currentKey = ffjtThreadMemberFlags
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyThreadMemberID, kn) {
						currentKey = ffjtThreadMemberID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'j':

					if bytes.Equal(ffjKeyThreadMemberJoinTimestamp, kn) {
						currentKey = ffjtThreadMemberJoinTimestamp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyThreadMemberMember, kn) {
						currentKey = ffjtThreadMemberMember
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyThreadMemberPresence, kn) {
						currentKey = ffjtThreadMemberPresence
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffjKeyThreadMemberUserID, kn) {
						currentKey = ffjtThreadMemberUserID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyThreadMemberFlags, kn) {
					currentKey = ffjtThreadMemberFlags
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyThreadMemberJoinTimestamp, kn) {
					currentKey = ffjtThreadMemberJoinTimestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyThreadMemberPresence, kn) {
					currentKey = ffjtThreadMemberPresence
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyThreadMemberMember, kn) {
					currentKey = ffjtThreadMemberMember
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyThreadMemberUserID, kn) {
					currentKey = ffjtThreadMemberUserID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyThreadMemberID, kn) {
					currentKey = ffjtThreadMemberID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtThreadMembernosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtThreadMemberID:
					goto handle_ID

				case ffjtThreadMemberUserID:
					goto handle_UserID

				case ffjtThreadMemberMember:
					goto handle_Member

				case ffjtThreadMemberPresence:
					goto handle_Presence

				case ffjtThreadMemberJoinTimestamp:
					goto handle_JoinTimestamp

				case ffjtThreadMemberFlags:
					goto handle_Flags

				case ffjtThreadMembernosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: j.ID type=discord.ChannelID kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.ID.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UserID:

	/* handler: j.UserID type=discord.UserID kind=uint64 quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.UserID.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Member:

	/* handler: j.Member type=discord.Member kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Member = nil

		} else {

			if j.Member == nil {
				j.Member = new(Member)
			}

			err = j.Member.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Presence:

	/* handler: j.Presence type=discord.Presence kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Presence = nil

		} else {

			if j.Presence == nil {
				j.Presence = new(Presence)
			}

			err = j.Presence.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_JoinTimestamp:

	/* handler: j.JoinTimestamp type=discord.Timestamp kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.JoinTimestamp.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Flags:

	/* handler: j.Flags type=discord.ThreadMemberFlags kind=uint64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ThreadMemberFlags", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Flags = ThreadMemberFlags(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *ThreadMetadata) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ThreadMetadata) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if j.Archived {
		buf.WriteString(`{ "archived":true`)
	} else {
		buf.WriteString(`{ "archived":false`)
	}
	buf.WriteString(`,"auto_archive_duration":`)
	fflib.FormatBits2(buf, uint64(j.AutoArchiveDuration), 10, j.AutoArchiveDuration < 0)
	buf.WriteString(`,"archive_timestamp":`)

	{

		obj, err = j.ArchiveTimestamp.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	if j.Locked {
		buf.WriteString(`,"locked":true`)
	} else {
		buf.WriteString(`,"locked":false`)
	}
	buf.WriteByte(',')
	if j.Invitable != false {
		if j.Invitable {
			buf.WriteString(`"invitable":true`)
		} else {
			buf.WriteString(`"invitable":false`)
		}
		buf.WriteByte(',')
	}
	if j.CreateTimestamp != nil {
		if true {
			buf.WriteString(`"thread_metadata":`)

			{

				obj, err = j.CreateTimestamp.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtThreadMetadatabase = iota
	ffjtThreadMetadatanosuchkey

	ffjtThreadMetadataArchived

	ffjtThreadMetadataAutoArchiveDuration

	ffjtThreadMetadataArchiveTimestamp

	ffjtThreadMetadataLocked

	ffjtThreadMetadataInvitable

	ffjtThreadMetadataCreateTimestamp
)

var ffjKeyThreadMetadataArchived = []byte("archived")

var ffjKeyThreadMetadataAutoArchiveDuration = []byte("auto_archive_duration")

var ffjKeyThreadMetadataArchiveTimestamp = []byte("archive_timestamp")

var ffjKeyThreadMetadataLocked = []byte("locked")

var ffjKeyThreadMetadataInvitable = []byte("invitable")

var ffjKeyThreadMetadataCreateTimestamp = []byte("thread_metadata")

// UnmarshalJSON umarshall json - template of ffjson
func (j *ThreadMetadata) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *ThreadMetadata) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtThreadMetadatabase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtThreadMetadatanosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyThreadMetadataArchived, kn) {
						currentKey = ffjtThreadMetadataArchived
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyThreadMetadataAutoArchiveDuration, kn) {
						currentKey = ffjtThreadMetadataAutoArchiveDuration
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyThreadMetadataArchiveTimestamp, kn) {
						currentKey = ffjtThreadMetadataArchiveTimestamp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyThreadMetadataInvitable, kn) {
						currentKey = ffjtThreadMetadataInvitable
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyThreadMetadataLocked, kn) {
						currentKey = ffjtThreadMetadataLocked
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyThreadMetadataCreateTimestamp, kn) {
						currentKey = ffjtThreadMetadataCreateTimestamp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.AsciiEqualFold(ffjKeyThreadMetadataCreateTimestamp, kn) {
					currentKey = ffjtThreadMetadataCreateTimestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyThreadMetadataInvitable, kn) {
					currentKey = ffjtThreadMetadataInvitable
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyThreadMetadataLocked, kn) {
					currentKey = ffjtThreadMetadataLocked
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyThreadMetadataArchiveTimestamp, kn) {
					currentKey = ffjtThreadMetadataArchiveTimestamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyThreadMetadataAutoArchiveDuration, kn) {
					currentKey = ffjtThreadMetadataAutoArchiveDuration
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyThreadMetadataArchived, kn) {
					currentKey = ffjtThreadMetadataArchived
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtThreadMetadatanosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtThreadMetadataArchived:
					goto handle_Archived

				case ffjtThreadMetadataAutoArchiveDuration:
					goto handle_AutoArchiveDuration

				case ffjtThreadMetadataArchiveTimestamp:
					goto handle_ArchiveTimestamp

				case ffjtThreadMetadataLocked:
					goto handle_Locked

				case ffjtThreadMetadataInvitable:
					goto handle_Invitable

				case ffjtThreadMetadataCreateTimestamp:
					goto handle_CreateTimestamp

				case ffjtThreadMetadatanosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Archived:

	/* handler: j.Archived type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.Archived = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.Archived = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AutoArchiveDuration:

	/* handler: j.AutoArchiveDuration type=discord.ArchiveDuration kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ArchiveDuration", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.AutoArchiveDuration = ArchiveDuration(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ArchiveTimestamp:

	/* handler: j.ArchiveTimestamp type=discord.Timestamp kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.ArchiveTimestamp.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Locked:

	/* handler: j.Locked type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.Locked = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.Locked = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Invitable:

	/* handler: j.Invitable type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.Invitable = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.Invitable = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CreateTimestamp:

	/* handler: j.CreateTimestamp type=discord.Timestamp kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.CreateTimestamp = nil

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			if j.CreateTimestamp == nil {
				j.CreateTimestamp = new(Timestamp)
			}

			err = j.CreateTimestamp.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
